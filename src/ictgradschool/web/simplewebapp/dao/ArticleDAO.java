package ictgradschool.web.simplewebapp.dao;

import com.mysql.jdbc.Statement;
import ictgradschool.web.simplewebapp.model.Article;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * An object in charge of loading / saving {@link Article} objects to / from a database.
 */
public class ArticleDAO implements AutoCloseable {

    private final Connection conn;

    /**
     * Creates a new DAO with a {@link Connection} from a {@link HikariConnectionPool}.
     *
     * @throws SQLException if something went wrong.
     */
    public ArticleDAO() throws SQLException {
        this.conn = HikariConnectionPool.getConnection();
    }

    /**
     * Gets a list of {@link Article}s from the database.
     *
     * @return a {@link List} of {@link Article} objects
     * @throws SQLException if something went wrong.
     */
    public List<Article> getAllArticles() throws SQLException {

        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM articles")) {
            try (ResultSet rs = stmt.executeQuery()) {
                List<Article> articles = new ArrayList<>();
                while (rs.next()) {
                    articles.add(articleFromResultSet(rs));
                }
                return articles;
            }
        }
    }

    /**
     * Gets the {@link Article} with the given id from the database.
     *
     * @param id the id to check
     * @return the {@link Article} with the given id, or <code>null</code> if none exists.
     * @throws SQLException if something went wrong.
     */
    public Article getArticleById(int id) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("SELECT * FROM articles WHERE id = ?")) {
            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return articleFromResultSet(rs);
                } else {
                    return null;
                }
            }
        }
    }

    /**
     * Creates an {@link Article} from a {@link ResultSet} at its current cursor location.
     *
     * @param rs the {@link ResultSet}
     * @return the {@link Article}
     * @throws SQLException if something went wrong.
     */
    private Article articleFromResultSet(ResultSet rs) throws SQLException {
        return new Article(rs.getInt(1), rs.getString(2), rs.getString(3));
    }

    /**
     * Saves the given {@link Article} to the database.
     * <p>If the article's {@link Article#id} is <code>null</code>, a new
     * row will be added to the database and the given article's id will be set to the value generated by the
     * database.</p>
     * <p>If the article's id is already set, the row for the article with that id will be updated instead.</p>
     *
     * @param article the article to save
     * @throws SQLException if something went wrong.
     */
    public void saveArticle(Article article) throws SQLException {
        if (article.getId() == null) {
            addArticle(article);
        } else {
            updateArticle(article);
        }
    }

    /**
     * Adds the given {@link Article} to the database.
     * <p>If the article's id is <code>null</code>, its id will be auto-generated by the database and set back to
     * the given {@link Article} object. Otherwise, the given id will be used.</p>
     *
     * @param article the article to add
     * @throws SQLException if something went wrong.
     */
    public void addArticle(Article article) throws SQLException {
        if (article.getId() == null) {
            addArticle_generateId(article);
        } else {
            addArticle_supplyId(article);
        }
    }

    /**
     * Adds the given {@link Article} to the database.
     * <p>Ignores any id value supplied, and uses the database to generate one. Then, sets the id of the given article
     * to the generated value.</p>
     *
     * @param article the article to add
     * @throws SQLException if something went wrong.
     */
    private void addArticle_generateId(Article article) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("INSERT INTO articles (title, content) VALUES (?, ?)", Statement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, article.getTitle());
            stmt.setString(2, article.getContent());
            stmt.executeUpdate();
            try (ResultSet rs = stmt.getGeneratedKeys()) {
                rs.next();
                article.setId(rs.getInt(1));
            }
        }
    }

    /**
     * Adds the given {@link Article} to the database.
     * <p>Uses the article's id (which must not be <code>null</code>).</p>
     *
     * @param article the article to add
     * @throws IllegalArgumentException if the given article's id is null.
     * @throws SQLException             if something went wrong.
     */
    private void addArticle_supplyId(Article article) throws SQLException {

        if (article.getId() == null) {
            throw new IllegalArgumentException("article's id cannot be null.");
        }

        try (PreparedStatement stmt = conn.prepareStatement("INSERT INTO articles (id, title, content) VALUES (?, ?, ?)")) {
            stmt.setInt(1, article.getId());
            stmt.setString(2, article.getTitle());
            stmt.setString(3, article.getContent());
            stmt.executeUpdate();
        }
    }

    /**
     * Updates the given {@link Article}'s entry in the database.
     *
     * @param article the article to update
     * @throws SQLException if something went wrong.
     */
    public void updateArticle(Article article) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("UPDATE articles SET title = ?, content = ? WHERE id = ?")) {
            stmt.setString(1, article.getTitle());
            stmt.setString(2, article.getContent());
            stmt.setInt(3, article.getId());
            stmt.executeUpdate();
        }
    }

    /**
     * Deletes the article with the given id from the database, if any.
     *
     * @param id the id to check
     * @throws SQLException if something went wrong.
     */
    public void deleteArticle(int id) throws SQLException {
        try (PreparedStatement stmt = conn.prepareStatement("DELETE FROM articles WHERE id = ?")) {
            stmt.setInt(1, id);
            stmt.executeUpdate();
        }
    }

    /**
     * Releases the {@link Connection} that was created when this DAO was created, back to the connection pool.
     *
     * @throws SQLException if something went wrong.
     */
    @Override
    public void close() throws SQLException {
        this.conn.close();
    }
}
